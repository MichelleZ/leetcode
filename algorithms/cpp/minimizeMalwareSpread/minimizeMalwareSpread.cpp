// Source: https://leetcode.com/problems/minimize-malware-spread/
// Author: Miao Zhang
// Date:   2021-03-25

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> colors(n, -1);
        int color = 0;
        for (int node = 0; node < n; node++) {
            if (colors[node] == -1) {
                dfs(graph, colors, node, color++);
            }
        }
        
        vector<int> cntcolor(color);
        for (int c: colors) {
            cntcolor[c]++;
        }
        
        vector<int> inicolor(color);
        for (int node: initial) {
            inicolor[colors[node]]++;
        }
        
        int res = INT_MAX;
        for (int node: initial) {
            int c = colors[node];
            if (inicolor[c] == 1) {
                if (res == INT_MAX) {
                    res = node;
                } else if (cntcolor[c] > cntcolor[colors[res]]) {
                    res = node;
                } else if (cntcolor[c] == cntcolor[colors[res]] && node < res) {
                    res = node;
                }
            }
        }
        return res == INT_MAX ? *min_element(initial.begin(), initial.end()) : res;
    }

private:
    void dfs(vector<vector<int>>& graph, vector<int>& colors, int node, int color) {
        colors[node] = color;
        for (int i = 0; i < graph.size(); i++) {
            if (graph[node][i] == 1 && colors[i] == -1) {
                dfs(graph, colors, i, color);
            }
        }
    }
};
